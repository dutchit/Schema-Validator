package com.workday.jersey;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import org.glassfish.jersey.media.multipart.FormDataMultiPart;

import com.workday.jersey.validationProcessing.TransformationProcess;
 
/**
 * Text Schema Service provider for http requests
 * 
 * Input requirement: MediaType.MULTIPART_FORM_DATA
 * 		- field "inputFile", type File
 * 		- field "schemaFile", type File
 * 
 * Supported transformation:
 * 		-text file to xml.  
 * 		-xml file to text.  
 * 
 * 	url: /ValidateService/webapi/runSchema
 * 
 * Transformation processing error messages are generated by TextSchemaProcessor
 * 
 * @author Elisa Yan
 * @author Britney Wong
 * 
 * @since 9.2.2015
 */
@Path("/runSchema")
public class textSchemaService {
	final int SUCCESS = 200;
	final int CLIENT_FAIL = 400;
	final int SERVER_ERROR = 500;
		
	/**
	 * Processes input and schema processing requests
	 * @param formParams FormDataMultipart object in the Request body
	 * @return Response with result as a formatted string
	 */
	@POST
	@Consumes(MediaType.MULTIPART_FORM_DATA)    
	@Produces(MediaType.TEXT_PLAIN)
	public Response processByFileName(FormDataMultiPart formParams) {
		int statusInt;
		String outputString;
		ResponseBuilder response;
		
		String inputFileName = formParams.getField("inputFile").getFormDataContentDisposition().getFileName();		
		InputStream inputIs = formParams.getField("inputFile").getValueAs(InputStream.class);
		String schemaSource = formParams.getField("schemaSource").getValueAs(String.class);

		InputStream schemaIs;

		if (schemaSource.toLowerCase().contains("svn")) {
			String schemaFileName = formParams.getField("schemaFileName").getValueAs(String.class);
			schemaIs = getInputStream(schemaFileName);
		} else {
			schemaIs = formParams.getField("schemaFile").getValueAs(InputStream.class);
		}
		
		try{
			if (inputIs == null || schemaIs == null) {
				statusInt = CLIENT_FAIL;
				outputString = "Can't process input parameters";
			} else if (inputFileName.endsWith(".txt")) {
				statusInt = SUCCESS;
				outputString = TransformationProcess.txtToXML(inputIs, schemaIs);
			} else if (inputFileName.endsWith(".xml")) {
				statusInt = SUCCESS;
				outputString = TransformationProcess.xmlToText(inputIs, schemaIs);
			} else {
				statusInt = CLIENT_FAIL;
				outputString = "Invalid input for transformation.";
			}
			inputIs.close();

		} catch (Exception ex){
			statusInt = SERVER_ERROR;
			outputString = ex.getMessage();
		}
		response = Response.status(statusInt).entity(outputString);
		
		//CORS HttpResponse header
		response.header("Access-Control-Allow-Origin", "*");
		response.header("Access-Control-Allow-Methods", "GET, POST, PUT, OPTIONS, X-XSRF-TOKEN");
		response.header("Access-Control-Allow-Headers", "Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With");
		
		//End of Header
	    return response.build();
	}
	
	public InputStream getInputStream(String fileName) {
		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		String schemasFolderPath = classLoader.getResource("scripts/svnFiles").getPath();
		File schemaFile = new File(schemasFolderPath + fileName);
	    try {
			return new FileInputStream(schemaFile);			
		} catch (FileNotFoundException e) {			
			e.printStackTrace();
		}
		return null;
	}

}